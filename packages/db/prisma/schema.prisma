datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    USER
}

enum OnRampStatus {
    Success
    Failure
    Processing
}

//-------------------------------------------------UserSchema -------------------------------------------------------------------------------------------------------------------//
model User {
    id                String                 @id @default(cuid())
    name              String?
    email             String                 @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    password          String?
    role              Role                   @default(USER)
    createdAt         DateTime               @default(now())
    updatedAt         DateTime               @updatedAt
    isEnabled2FA      Boolean                @default(false)
    confirmTwoFactor  TwoFactorConfirmation?
    balances          Balance[]
    OnRampTransaction OnRampTransaction[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    id      String
    token   String
    expires DateTime
    email   String

    @@id([id, token])
}

model PasswordResetToken {
    email   String
    id      String   @id @default(cuid())
    token   String   @unique
    expires DateTime
    issueAt DateTime @default(now())

    @@unique([email, token])
}

model TwoFactorToken {
    token   String   @unique
    email   String
    id      String   @id @default(cuid())
    expires DateTime
    issueAt DateTime @default(now())
    isUsed  Boolean  @default(false)

    @@unique([token, email])
}

model TwoFactorConfirmation {
    id     String @id @default(cuid())
    userId String @unique
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//--------------------------------------------------------------------Banking schema starts------------------------------------------------------------------------//
model Bank {
    id          Int        @id @default(autoincrement())
    name        String     @unique
    redirectUrl String
    BankUser    BankUser[]
}

model BankUser {
    id        Int      @id @default(autoincrement())
    firstName String
    lastName  String
    bankId    Int
    bank      Bank     @relation(fields: [bankId], references: [id])
    phone     String
    password  String
    balance   Balance?
}

model Balance {
    id         Int       @id @default(autoincrement())
    locked     Int?
    amount     Int
    userId     String
    bankUserId Int       @unique // Simplifing the Bank balance to have one-one relation
    User       User?     @relation(fields: [userId], references: [id])
    bankUser   BankUser? @relation(fields: [bankUserId], references: [id])

    @@map("walletBalance")
}

model OnRampTransaction {
    id        Int          @id @default(autoincrement())
    status    OnRampStatus
    token     String       @unique
    provider  String
    amount    Int
    startTime DateTime
    userId    String
    user      User         @relation(fields: [userId], references: [id])
}
